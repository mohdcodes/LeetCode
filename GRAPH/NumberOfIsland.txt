BFS SOLUTION

private:
        void bfs(int row, int col, vector<vector<char>>& grid, vector<vector<int>>&vis, int n, int m){
            vis[row][col] = 1;
            queue<pair<int, int>>q;
            q.push({row, col});
            while(!q.empty()){
                int row = q.front().first;
                int col = q.front().second;
                q.pop();
                for(int delRow = -1; delRow<=1; delRow++){
                    for(int delCol=-1; delCol<=1; delCol++){
                        int nrow = row+delRow;
                        int ncol = col+delCol;
                        if(nrow>=0 && nrow< n && ncol>=0 && ncol< m && vis[nrow][ncol]==0 && grid[nrow][ncol]=='1'){
                            vis[nrow][ncol] = 1;
                            q.push({nrow, ncol});
                        }
                    }
                }
                
            }
        }
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>>vis(n, vector<int>(m, 0));
        int islands = 0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]=='1'){
                    bfs(i, j, grid, vis, n, m);
                    islands++;
                }
            }
        }
        return islands;
    }
 ---------------------------------------------------------------------

 DFS SOLUTION


 private:
        void dfs(int row, int col, vector<vector<char>>& grid, vector<vector<int>>&vis, int n, int m){
            vis[row][col] = 1;
            for(int delRow = -1; delRow<= 1; delRow++){
                for(int delCol = -1; delCol<=1; delCol++){
                    int nrow = row+delRow;
                    int ncol = col+delCol;
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==0 && grid[nrow][ncol]=='1'){
                        dfs(nrow, ncol, grid, vis, n, m);
                    }
                }
            }
                        
        }
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>>vis(n, vector<int>(m, 0));
        int islands = 0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]=='1'){
                    dfs(i, j, grid, vis, n, m);
                    islands++;
                }
            }
        }
        return islands;
    }